# -*- coding: utf-8 -*-
"""3_topic_subscriber

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DlSy_iXXSCBecO71O7aA_Mtbm00IIqyE

# **Exercise 2.1**

1. Create a new package named **topic_subscriber_pkg**. When creating the package, add as dependencies roscpp and std_msgs.

2. Inside the src folder of the package, create a new file named **simple_topic_subscriber**.cpp. Inside this file, copy the contents of **simple_topic_subscriber**.cpp

3. Create a launch file for launching this code.

4. Do the necessary modifications to your **CMakeLists**.txt file, and compile the package.

5. Execute the launch file to run your executable.
"""

catkin_create_pkg topic_subscriber_pkg roscpp std_msgs

"""**C++ Program {2.2}: simple_topic_subscriber.cpp**"""

#include <ros/ros.h>
#include <std_msgs/Int32.h>

void counterCallback(const std_msgs::Int32::ConstPtr& msg)
{
  ROS_INFO("%d", msg->data);
}

int main(int argc, char** argv) {

    ros::init(argc, argv, "topic_subscriber");    // node name
    ros::NodeHandle nh;                            // node 
    
    ros::Subscriber sub = nh.subscribe("counter", 1000, counterCallback);   // topic subscriber 
    
    ros::spin();                  // call back 
    
    return 0;
}

add_executable(simple_topic_subscriber src/simple_topic_subscriber.cpp)

add_dependencies(simple_topic_subscriber 
                 ${simple_topic_subscriber_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

target_link_libraries(simple_topic_subscriber
   ${catkin_LIBRARIES}
 )

rostopic echo /counter

rostopic pub <topic_name> <message_type> <value>

rostopic pub /counter std_msgs/Int32 5

user ~ $ rostopic echo /counter
WARNING: no messages received and simulated time is active.
Is /clock being published?
data:
5

#include <ros/ros.h>
#include <std_msgs/Int32.h>

void counterCallback(const std_msgs::Int32::ConstPtr& msg)                        // Define a function called 'callback' that receives a                           // parameter named 'msg' 
{
  ROS_INFO("%d", msg->data);                                                      // Print the value 'data' inside the 'msg' parameter
}

int main(int argc, char** argv) {

    ros::init(argc, argv, "topic_subscriber");                                    // Initiate a Node called 'topic_subscriber'
    ros::NodeHandle nh;
    
    ros::Subscriber sub = nh.subscribe("counter", 1000, counterCallback);        // Create a Subscriber object that will              // listen to the /counter topic and will
                                                                                  // call the 'callback' function each time                                                                            
                                                                                 // it reads something from the topic
    
    ros::spin(); // Create a loop that will keep the program in execution
    
    return 0;
}

"""# Solution Exercise 2.4

**Launch File: odom_subscriber.launch**
"""

<launch>
    <node pkg="topics_24" type="odom_subscriber" name="odom_sub_node" output="screen" />
</launch>

"""**C++ File: odom_subscriber.cpp**"""

#include <ros/ros.h>
#include <nav_msgs/Odometry.h>

void counterCallback(const nav_msgs::Odometry::ConstPtr& msg)
{
  ROS_INFO("%s", msg->header.frame_id.c_str());
  //ROS_INFO("%f", msg->twist.twist.linear.x);
  //ROS_INFO("%f", msg->pose.pose.position.x);
}

int main(int argc, char** argv) {

    ros::init(argc, argv, "odom_sub_node");    // topic name 
    ros::NodeHandle nh;                        // node 
    
    ros::Subscriber sub = nh.subscribe("odom", 1000, counterCallback);   // 
    
    ros::spin();
    
    return 0;
}

add_executable(odom_subscriber src/odom_subscriber.cpp)

add_dependencies(odom_subscriber ${odom_subscriber_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

target_link_libraries(odom_subscriber
   ${catkin_LIBRARIES}
 )

rostopic echo /odom -n1

rosmsg show nav_msgs/Odometry

"""# Solution Exercise 2.5"""

roscd topics_25
mkdir msg

"""**Message File: Age.msg**"""

float32 years
float32 months
float32 days

"""**CMakeLists.txt**"""

cmake_minimum_required(VERSION 2.8.3)
project(topics_25)

## Here go all the packages needed to COMPILE the messages of topic, services and actions.
## Its only geting its paths, and not really importing them to be used in the compilation.
## Its only for further functions in CMakeLists.txt to be able to find those packages.
## In package.xml you have to state them as build
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
  message_generation
)

## Generate topic messages in the 'msg' folder
## In this function will be placed all the topic messages files of this package ( in the msg folder ) to be compiled.
add_message_files(
  FILES
  Age.msg
)

## Here is where the packages needed for the topic messages compilation are imported.
generate_messages(
  DEPENDENCIES
  std_msgs
)

## State here all the packages that will be needed by someone that executes something from your package.
## All the packages stated here must be in the package.xml as exec_depend
catkin_package(
  CATKIN_DEPENDS roscpp std_msgs message_runtime
)

include_directories(
  ${catkin_INCLUDE_DIRS}
)

"""**package.xml**"""

<?xml version="1.0"?>
<package format="2">
  <name>topics_25</name>
  <version>0.0.0</version>
  <description>The topics_25 package</description>


  <maintainer email="user@todo.todo">user</maintainer>

  <license>TODO</license>

   <build_export_depend>message_generation</build_export_depend> 
   <build_depend>message_generation</build_depend>

  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>roscpp</build_depend>
  <build_depend>std_msgs</build_depend>
  <build_export_depend>roscpp</build_export_depend>
  <exec_depend>roscpp</exec_depend>
  <build_export_depend>std_msgs</build_export_depend>
  <exec_depend>std_msgs</exec_depend>
  
  <build_export_depend>message_runtime</build_export_depend>
  <exec_depend>message_runtime</exec_depend>

  <export>

  </export>
</package>

roscd
cd ..
catkin_make
source devel/setup.bash

rosmsg list | grep Age

topics_25/Age

<launch>
    <node pkg="topics_25" type="publish_age" name="publish_age_node" output="screen" />
</launch>

"""**C++ File: publish_age.cpp**"""

#include <ros/ros.h>
#include <topics_25/Age.h>

int main(int argc, char** argv) {

    ros::init(argc, argv, "publish_age_node");
    ros::NodeHandle nh;
    
    ros::Publisher pub = nh.advertise<topics_25::Age>("age_info", 1000);
    ros::Rate loop_rate(2);
    
    topics_25::Age age;
    age.years = 5;
    age.months = 10;
    age.days = 21;
    
    while (ros::ok())
    {
        pub.publish(age);
        ros::spinOnce();
        loop_rate.sleep();
    }
    
    return 0;
}

"""As always, you'll need to add the following lines to your CMakeLists.txt file:"""

add_executable(publish_age src/publish_age.cpp)

add_dependencies(publish_age
                 ${publish_age_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

target_link_libraries(publish_age
   ${catkin_LIBRARIES}
 )

add_dependencies(publish_age topics_25_generate_messages_cpp)

roslaunch topics_25 publish_age.launch

rostopic echo /age_info